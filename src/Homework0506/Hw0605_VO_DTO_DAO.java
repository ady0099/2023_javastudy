package Homework0506;

/*
개인)  0602- 0605
VO, DTO , DAO
에 해서 리포트 제출
*/
public class Hw0605_VO_DTO_DAO {
	/*
		VO(Value Object)
		: 도메인에서 한 개 또는 그 이상의 속성들을 묶어서 값을 나타내는 객체이다.
		
		1. Immutability(불변성)
		VO는 값 그 자체를 나타내기 때문에 setter를 허용하지 않고, 결과적으로 readonly의 성격을 갖게 된다.
		VO를 호출하는 쪽에서는 값 변경에 대한 걱정을 할 필요가 없다. 그러나 getter이외의 로직을 가질 수는 있다.
		
		2. value equality(값 동등성)
		생성된 다수의 VO가 주소값이 다른 각각의 객체이더라도, '값'이 같다면 동등한 객체로 판단한다. 
		지폐를 예로 들면, 일련 번호가 다른 각각의 만 원들은 모두 '만 원'의 가치를 갖는다는 점에서 각각의 만 원들은 '모두 같은 만 원이다' 라는 결론을 내릴 수 있다. 
		이를 위해 equals와 hashCode를 재정의할 필요가 있다.
		
		3. self validation(자가 유효성 검사)
		원시 타입을 사용했을 때, 사용하는 모든 곳에서 유효성 검사를 진행해야한다.
		하지만 VO를 사용하면 최초 VO 생성 시에 유효성 검사를 진행하기 때문에 값을 신뢰할 수 있다.
		
			
		DTO(Data Transfer Object)
		: 계층(Model, View, Controller)간 데이터 교환을 위한 자바빈즈이다.
		DTO를 사용하여 얻을 수 있는 장점은 도메인 모델을 캡슐화하여 필요한 정보만 선택적으로 보낼 수 있고, 모델과 뷰의 결합을 약화시킬 수 있다는 것이다.
		DTO는 VO와는 다르게 별도의 로직 없이 getter/setter만을 사용하며, 값이 같아도 다른 객체일 수 있다.
		
		
		
		DAO(Data Access Object)
		: DB의 데이터에 접근하기 위한 객체이다.
		DB접근 로직과 비즈니스 로직을 분리하기 위해 사용하며, 데이터를 삽입, 삭제, 검색하는 기능 등을 수행한다.
		주요 프레임워크들이 커넥션 풀을 제공하기에 DAO를 별도로 만드는 경우는 적다.
		
		
		
	 */
}
